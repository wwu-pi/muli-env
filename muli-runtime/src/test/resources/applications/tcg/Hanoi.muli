package applications.tcg;

import java.util.List;
import de.wwu.muli.*;
import de.wwu.muli.solution.*;
import java.lang.Object;
import de.wwu.muli.tcg.*;
import de.wwu.muli.tcg.testsetreducer.*;

public class MainHanoi {

    public static void main(String[] args) {
        Solution[] solutions = Muli.getAllSolutionsWithTestCases(MainHanoi::searchRegion, Hanoi.class.getName() + ".hanoi");
        TestCaseGenerator tcg = TestCaseGenerator.get(solutions);
        TestSetReducer reducer = new SimpleForwardsTestSetReducer();
        tcg.setTestSetReducer(reducer);
        tcg.generateTestClassStringRepresentation();
    }

    static int searchRegion() {
        int n free;
        if (n < 1 || n > 11) {
            throw Muli.fail();
        }
        Hanoi h = new Hanoi();
        int result = h.hanoi(n);
        h.setCounter(0);
        h.applyHanoi(n, 1, 3, 2);
        // result and the counter should be the same!
        if(h.getCounter() != result){
            System.out.println("result and counter not the same");
        }
        return result;
    }

}


/**
 * Copyright (c) 2011, Regents of the University of California All rights reserved.
 *
 * <p>Redistribution and use in source and binary forms, with or without modification, are permitted
 * provided that the following conditions are met:
 *
 * <p>1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 *
 * <p>2. Redistributions in binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other materials provided with
 * the distribution.
 *
 * <p>3. Neither the name of the University of California, Berkeley nor the names of its
 * contributors may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class Hanoi {

  public int counter;

  /*
   * This function returns the optimal amount of steps,
   * needed to solve the problem for n-disks
   */
  public int hanoi(int n) {
    if (n == 1) {
      return 1;
    }
    return 2 * (hanoi(n - 1)) + 1;
  }

  /*
   * This applies the known algorithm, without executing it (so no arrays).
   * But the amount of steps is counted in a global variable.
   */
  public void applyHanoi(int n, int from, int to, int via) {
    if (n == 0) {
      return;
    }
    // increment the number of steps
    counter++;
    applyHanoi(n - 1, from, via, to);
    applyHanoi(n - 1, via, to, from);
  }

  public void setCounter(int i){
    this.counter = i;
  }

  public int getCounter(){
    return this.counter;
  }
}
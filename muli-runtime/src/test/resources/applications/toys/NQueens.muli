package applications.toys;

import java.util.List;
import de.wwu.muli.*;
import de.wwu.muli.solution.*;

public class Board {
    final int dim;

    public Board(int dim) {
        this.dim = dim;
    }

    public boolean isOnBoard(Queen q) {
        if (q.x < 0) return false;
        if (q.x > dim-1) return false;
        if (q.y < 0) return false;
        if (q.y > dim-1) return false;
        return true;
    }

    public boolean threatens(Queen p, Queen q) {
        if (p.x == q.x) return true;
        if (p.y == q.y) return true;
        if (p.x - p.y == q.x - q.y) return true;
        if (p.x + p.y == q.x + q.y) return true;
        return false;
    }
}

public class Queen {
    int x, y;
}

public class NQueens {

  public static void main(String[] args) {
  Solution<Object> solution = Muli.getOneSolution(NQueens::solve);
  Queen[] result = (Queen[])solution.value;
  for (Queen q: result) {
    System.out.println("(" + q.x + "," + q.y + ")");
  }
  }

  private static Queen[] solve() {
    final int n = 8;
    Board board = new Board(n);
    Queen[] qs = new Queen[n];
    for (int i = 0; i < n; i++) {
        Queen q free;
        qs[i] = q;
    }
    for (int i = 0; i < n; i++) {
        boolean valid = board.isOnBoard(qs[i]);
        if (!valid) {
            throw Muli.fail();
        }

        for (int j = i+1; j < n; j++) {
            boolean t = board.threatens(qs[i], qs[j]);
            if (t) {
                throw Muli.fail();
            }
        }
    }
    return qs;
  }
}

package applications.copying;
import de.wwu.muli.*;
import de.wwu.muli.solution.*;

public class ArrayInputAndOutput {

    public static void main(String[] args) {
        Solution<Object>[] solutions = Muli.getAllSolutionsWithTestCases(ArrayInputAndOutput::checkDriver, ArrayInputAndOutput.class.getName() + ".check");
        boolean foundFirst = false, foundSecond = false, foundThird = false;
        for (Solution s : solutions) {
            TestCase t = s.testCase;
            int[] ar = (int[]) t.getInput("ar");
            int[] result = (int[]) s.value;
            if (result == null && ar.length != 3) {
                foundFirst = true;
            } else if (result.length == 3) {
                if (result.length != ar.length) {
                    throw new IllegalStateException("Input array length should be equal to output array length!");
                }
                if (result[2] == 5) {
                    if (result[0] != 2 || result[1] != -12) {
                        throw new IllegalStateException("Result has illegal values at indexes given result[2] == 5.");
                    }
                    if (ar[0] != 2 || ar[1] != -12 || ar[2] == 5) {
                        throw new IllegalStateException("Input has illegal values for result[2] == 5: ar[0] == " + ar[0]
                            + ", ar[1] == " + ar[1] + ", ar[2] == " + ar[2]);
                    }
                    foundSecond = true;
                } else if (result[2] == 7) {
                    if (result[0] != 2 || result[1] != -12) {
                        throw new IllegalStateException("Result has illegal values at indexes given result[2] == 7.");
                    }
                    if (ar[0] == 2 || ar[1] == -12 || ar[2] != 6) {
                        throw new IllegalStateException("Input has illegal values for result[2] == 7: ar[0] == " + ar[0]
                                                    + ", ar[1] == " + ar[1] + ", ar[2] == " + ar[2]);
                    }
                    foundThird = true;
                } else {
                    throw new IllegalStateException("Unexpected value for result found at index 2: " + result[2]);
                }
            } else {
                throw new IllegalStateException("Unexpected combination of inputs and outputs found.");
            }
        }

        if (!(foundFirst && foundSecond && foundThird)) {
            throw new IllegalStateException("Not all results have been found!");
        }
    }
    private static int[] checkDriver() {
        int[] ar free;
        return check(ar);
    }

    private static int[] check(int[] ar) {
        int i free;
        if (ar.length != (i+1)) {
            throw Muli.fail();
        }

        if (i == 2) {
            if (ar[0] == 2 && ar[1] == -12) {
                if (ar[2] == 5) {
                    throw Muli.fail();
                }
                ar[i] = 5;
                // This bit is actually an important check: The IntConstant '2' of the array ar has become stale
                // due to the free variable 'i'. The direct access tries to return a value ar[2] != 5
                // Since this yields an ArraySelect-constraint, the constraint system would be unsatisfiable.
                // This assignment checks whether the stale index '2' was properly replaced.
                int x = ar[2];
                return ar;
            } else {
                if (ar[0] == 2 || ar[1] == -12 || ar[2] != 6) {
                    throw Muli.fail();
                }
                ar[0] = 2;
                ar[1] = -12;
                ar[2] = 7;
                return ar;
            }
        }

        return null;
    }
}
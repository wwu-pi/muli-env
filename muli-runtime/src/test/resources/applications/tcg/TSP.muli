package applications.tcg;

import java.util.List;
import de.wwu.muli.*;
import de.wwu.muli.solution.*;
import java.lang.Object;
import de.wwu.muli.tcg.*;
import java.lang.Math;
import de.wwu.muli.tcg.testsetreducer.*;

public class MainTSP {

    public static void main(String[] args) {
        Solution[] solutions = Muli.getAllSolutionsWithTestCases(TspSolver::searchRegion, TspSolver.class.getName() + ".solve");
        for(Solution s : solutions){
            //System.out.println("output: "+s.value.toString());
            TestCase<?> tc = s.testCase;
            Object[] inputs = tc.getInputs();
            for(Object o : inputs) {
                //Arrayref ref = (Arrayref) o;
                //System.out.println("input: "+o.toString());
            }
        }
        TestCaseGenerator tcg = TestCaseGenerator.get(solutions);
        tcg.setTestSetReducer(new SimpleForwardsTestSetReducer());
        tcg.generateTestClassStringRepresentation();
        //System.out.println(hell);
    }

}

public class TspSolver {
    private final int N;
    private int D[][];
    private boolean visited[];
    private int best;

    public int nCalls;

    public TspSolver(int N, int D[][]) {
      this.N = N;
      this.D = D;
      this.visited = new boolean[N];
      this.nCalls = 0;
    }

    public int solve() {
      best = Integer.MAX_VALUE-1;

      for (int i = 0; i < N; i++) visited[i] = false;

      visited[0] = true;
      search(0, 0, N - 1);

      return best;
    }

    private int bound(int src, int length, int nLeft) {
      return length;
    }

    private void search(int src, int length, int nLeft) {
      nCalls++;

      if (nLeft == 0) {
        if (length + D[src][0] < best) best = length + D[src][0];
        return;
      }

      if (bound(src, length, nLeft) >= best) return;

      for (int i = 0; i < N; i++) {
        if (visited[i]) continue;

        visited[i] = true;
        search(i, length + D[src][i], nLeft - 1);
        visited[i] = false;
      }
    }


  public static int searchRegion() {
    final int N = 4;
    System.out.println("N: "+N);

    int D[][] = new int[N][N];

    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        int next = Verifier.nondetInt();
        if(next<1) throw Muli.fail();
        D[i][j] = next;
      }
    }

    TspSolver tspSolver = new TspSolver(N, D);
    int sln = tspSolver.solve();
    return sln;
  }
}

public class Verifier{
    public static int nondetInt() {
        int i free;
        return i;
    }

    public static void assume(boolean condition){
        if(!condition){
            throw Muli.fail();
        }
    }
}
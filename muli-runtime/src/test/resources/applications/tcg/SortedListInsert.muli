package applications.tcg;

import java.util.List;
import de.wwu.muli.*;
import de.wwu.muli.solution.*;
import java.lang.Object;
import de.wwu.muli.tcg.*;
import de.wwu.muli.tcg.testsetreducer.*;

public class MainSortedList{

    public static void main(String[] args) {
        Solution[] solutions = Muli.getAllSolutionsWithTestCases(SortedListSearch::searchRegion, SortedList.class.getName() + ".insert");
        for(Solution s : solutions){
            System.out.println(s.value.toString());
            TestCase<?> tc = s.testCase;
            Object[] inputs = tc.getInputs();
            for(Object o : inputs) {
                //Arrayref ref = (Arrayref) o;
                System.out.println(o.toString());
            }
        }
        TestCaseGenerator tcg = TestCaseGenerator.get(solutions);
        tcg.setTestSetReducer(new SimpleForwardsTestSetReducer());
        tcg.generateTestClassStringRepresentation();
        //System.out.println(solution.value);
    }

}

      public class SortedList {
          public int x;
          public SortedList next;

          private static final int SENTINEL = Integer.MAX_VALUE-1;

          private SortedList(int x, SortedList next) {
            this.x = x;
            this.next = next;
          }

          public SortedList() {
            this(SENTINEL, null);
          }

          public SortedList insert(int data) {
            if (data > this.x) {
              next.insert(data);
            } else {
              next = new SortedList(x, next);
              x = data;
            }
            return this;
          }

          public int limitDepth(int i){
            int depth = 0;
            SortedList list = next;
            while(list!=null){
                depth++;
                if(depth == i){
                    list.next = null;
                }
                list = list.next;
            }
            return depth;
          }

          public String toString() {
            String out = x + ", ";
            if(next != null) out = out + next.toString();
            return out;
          }
        }
class SortedListSearch {
    static SortedList searchRegion() {
           SortedList list free;
           list.limitDepth(5);
           SortedList l = list;
           while(l.next != null) {
                if(l.next.x < l.x) throw Muli.fail();
                l = l.next;
           }
           int i free;
           list = list.insert(i);
           return list;
    }
}

public class Verifier{
    public static int nondetInt() {
        int i free;
        return i;
    }

    public static void assume(boolean condition){
        if(!condition){
            throw Muli.fail();
        }
    }
}
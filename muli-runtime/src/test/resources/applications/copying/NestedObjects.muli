package applications.copying;
import de.wwu.muli.*;
import de.wwu.muli.solution.*;

public class NestedObjects {

    public static void main(String[] args) {
        Solution<Object>[] solutions = Muli.getAllSolutionsWithTestCases(NestedObjects::checkDriver, NestedObjects.class.getName() + ".check");
        boolean foundFirst = false, foundSecond = false, foundThird = false;
        for (Solution s : solutions) {
            NestedClass0 n = (NestedClass0) s.value;
            TestCase t = s.testCase;
            NestedClass0 in = (NestedClass0) t.getInput("n");
            if (n.nested.nested.val == 2) {
                foundFirst = in.nested.nested.val == 1;
            } else {
                if (n.nested.nested.val != 3) {
                    throw new IllegalStateException("Value of n.nested.nested.val should be 3.");
                }

                if (n.nested.val == 5) {
                    foundSecond = in.nested.val == 4;
                } else {
                    if (n.nested.val != 6) {
                        throw new IllegalStateException("Value of n.nested.val should be 6.");
                    }
                    foundThird = n.val == 7 && in.val == 7;
                }
            }
            if (n.nested.nested.nested.nested.nested.nested.val != 8 || in.nested.nested.nested.nested.nested.nested.val != 8) {
                throw new IllegalStateException("The two values should equal to 8.");
            }

            if (n.nested.nested.nested.nested.nested.val != 10 ||
                in.nested.nested.nested.nested.nested.val  != 9) {
                    throw new IllegalStateException("The two values should be 10 and 9 respectively, are: "
                        + n.nested.nested.nested.nested.nested.val + " and " + in.nested.nested.nested.nested.nested.val);
            }

        }
        if (!(foundFirst && foundSecond && foundThird)) {
            throw new IllegalStateException("Not all results have been found. found1: " + foundFirst + ", 2: " + foundSecond
                + ", 3: " + foundThird + ".");
        }
    }

    static class NestedClass0 {
        public int val;
        public NestedClass1 nested;
    }

    static class NestedClass1 {
        public NestedClass2 nested;
        public int val;
    }

    static class NestedClass2 {
        public int val;
        public NestedClass2 nested;
    }

    private static NestedClass0 checkDriver() {
        NestedClass0 in free;
        return check(in);
    }

    private static NestedClass0 check(NestedClass0 n) {
        if (n.nested.nested.val == 1) {
            n.nested.nested.val = 2;
        } else {
            n.nested.nested.val = 3;

            if (n.nested.val == 4) {
                n.nested.val = 5;
            } else {
                n.nested.val = 6;

                if (n.val != 7) {
                    throw Muli.fail();
                }
            }
        }

        if (n.nested.nested.nested.nested.nested.val == 9) {
            n.nested.nested.nested.nested.nested.val = 10;
        } else {
            throw Muli.fail();
        }

        if (n.nested.nested.nested.nested.nested.nested.val != 8) {
            throw Muli.fail();
        }

        return n;
    }
}